{"ast":null,"code":"var _jsxFileName = \"/Users/gkzhou/Dropbox/Code/leafletnotebook/src/components/TextEditor.jsx\";\n// Import React!\nimport React from 'react';\nimport { Form, Button, Segment, Icon } from 'semantic-ui-react';\nimport { EditorState, ContentState, Editor, RichUtils, getDefaultKeyBinding } from 'draft-js';\nconst basicTextStylePlugin = {\n  keyBindingFn(event) {\n    return getDefaultKeyBinding(event);\n  },\n\n  handleKeyCommand(command, {\n    getEditorState,\n    setEditorState\n  }) {\n    const editorState = getEditorState();\n    const newEditorState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newEditorState) {\n      setEditorState(newEditorState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n};\n\nclass TextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.downloadTxtFile = () => {\n      const element = document.createElement(\"a\");\n      const file = new Blob(this.state.value);\n      console.log(this.props.quotes);\n      element.href = URL.createObjectURL(file);\n      element.download = \"transcript-edited.txt\";\n      document.body.appendChild(element); // Required for this to work in FireFox\n\n      element.click();\n    };\n\n    this.state = {\n      value: '',\n      editorState: EditorState.createWithContent(ContentState.createFromText(this.props.audioText))\n    };\n    /* Create an array of plugins to be passed to `Editor` */\n\n    this.plugins = [basicTextStylePlugin];\n\n    this.onChange = editorState => this.setState({\n      editorState\n    });\n\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  updateEditorState(editorState) {\n    this.setState({\n      editorState\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  _onBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n\n  _onItalicClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'ITALIC'));\n  }\n\n  // Render the editor.\n  render() {\n    return React.createElement(Segment, {\n      className: \"editor-segment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Button, {\n      icon: true,\n      size: \"mini\",\n      onClick: this._onBoldClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(Button, {\n      icon: true,\n      size: \"mini\",\n      onClick: this._onItalicClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"italic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(Button, {\n      floated: \"right\",\n      icon: true,\n      size: \"mini\",\n      onClick: this.downloadTxtFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"share square outline icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"editor\",\n      onClick: this.focus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      editorState: this.state.editorState,\n      onChange: this.updateEditorState.bind(this),\n      plugins: this.plugins,\n      handleKeyCommand: this.handleKeyCommand,\n      spellCheck: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default TextEditor;","map":{"version":3,"sources":["/Users/gkzhou/Dropbox/Code/leafletnotebook/src/components/TextEditor.jsx"],"names":["React","Form","Button","Segment","Icon","EditorState","ContentState","Editor","RichUtils","getDefaultKeyBinding","basicTextStylePlugin","keyBindingFn","event","handleKeyCommand","command","getEditorState","setEditorState","editorState","newEditorState","TextEditor","Component","constructor","props","downloadTxtFile","element","document","createElement","file","Blob","state","value","console","log","quotes","href","URL","createObjectURL","download","body","appendChild","click","createWithContent","createFromText","audioText","plugins","onChange","setState","bind","handleChange","updateEditorState","target","newState","_onBoldClick","toggleInlineStyle","_onItalicClick","render","focus"],"mappings":"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","sourcesContent":["// Import React!\nimport React from 'react'\nimport { Form, Button, Segment, Icon } from 'semantic-ui-react'\nimport { EditorState, ContentState, Editor, RichUtils, getDefaultKeyBinding } from 'draft-js'\n\nconst basicTextStylePlugin = {\n  keyBindingFn(event) {\n    return getDefaultKeyBinding(event);\n  },\n\n  handleKeyCommand(command, { getEditorState, setEditorState }) {\n    const editorState = getEditorState();\n    const newEditorState = RichUtils.handleKeyCommand(\n      editorState, command\n    );\n    if (newEditorState) {\n      setEditorState(newEditorState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n};\n\n\nclass TextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      editorState: EditorState.createWithContent(ContentState.createFromText(this.props.audioText)),\n    };\n    /* Create an array of plugins to be passed to `Editor` */\n    this.plugins = [\n      basicTextStylePlugin,\n    ];\n    this.onChange = (editorState) => this.setState({ editorState });\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  updateEditorState(editorState) {\n    this.setState({ editorState });\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n\n  _onBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n\n  _onItalicClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'ITALIC'));\n  }\n\n  downloadTxtFile = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob(this.state.value);\n    console.log(this.props.quotes)\n    element.href = URL.createObjectURL(file);\n    element.download = \"transcript-edited.txt\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n\n  // Render the editor.\n  render() {\n    return (\n      <Segment className=\"editor-segment\">\n        <Button icon size='mini' onClick={this._onBoldClick.bind(this)}><Icon name='bold' /></Button>\n        <Button icon size='mini' onClick={this._onItalicClick.bind(this)}><Icon name='italic' /></Button>\n        <Button floated='right' icon size='mini' onClick={this.downloadTxtFile}><Icon name='share square outline icon' /></Button>\n        <div className=\"editor\" onClick={this.focus}>\n          <Editor\n            editorState={this.state.editorState}\n            onChange={this.updateEditorState.bind(this)}\n            plugins={this.plugins}\n            handleKeyCommand={this.handleKeyCommand}\n            spellCheck={true}\n          ></Editor>\n        </div>\n      </Segment>\n    )\n  }\n}\n\nexport default TextEditor;"]},"metadata":{},"sourceType":"module"}