{"ast":null,"code":"var _jsxFileName = \"/Users/gkzhou/Dropbox/Code/leafletnotebook/src/components/TextEditor.jsx\";\n// Import React!\nimport React from 'react';\nimport { Form, Button, Segment, Icon } from 'semantic-ui-react';\nimport { EditorState, ContentState, Editor, RichUtils, getDefaultKeyBinding } from 'draft-js';\nconst basicTextStylePlugin = {\n  keyBindingFn(event) {\n    return getDefaultKeyBinding(event);\n  },\n\n  handleKeyCommand(command, {\n    getEditorState,\n    setEditorState\n  }) {\n    const editorState = getEditorState();\n    const newEditorState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newEditorState) {\n      setEditorState(newEditorState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n};\n\nclass TextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.downloadTxtFile = () => {\n      var text = this.state.editorState.getCurrentContent().getPlainText('\\n');\n      const element = document.createElement(\"a\");\n      const file = new Blob([text], {\n        type: 'text/plain'\n      });\n      console.log(this.props.quotes);\n      element.href = URL.createObjectURL(file);\n      element.download = \"transcript-edited.txt\";\n      document.body.appendChild(element); // Required for this to work in FireFox\n\n      element.click();\n    };\n\n    this.state = {\n      value: '',\n      editorState: EditorState.createWithContent(ContentState.createFromText(this.props.audioText))\n    };\n    /* Create an array of plugins to be passed to `Editor` */\n\n    this.plugins = [basicTextStylePlugin];\n\n    this.onChange = editorState => this.setState({\n      editorState\n    });\n\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  updateEditorState(editorState) {\n    this.setState({\n      editorState\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  _onBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n\n  _onItalicClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'ITALIC'));\n  }\n\n  // Render the editor.\n  render() {\n    return React.createElement(Segment, {\n      className: \"editor-segment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Button, {\n      icon: true,\n      size: \"mini\",\n      onClick: this._onBoldClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(Button, {\n      icon: true,\n      size: \"mini\",\n      onClick: this._onItalicClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"italic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), \"test\", React.createElement(Button, {\n      floated: \"right\",\n      icon: true,\n      size: \"mini\",\n      onClick: this.downloadTxtFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"share square outline icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"editor\",\n      onClick: this.focus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      id: \"textarea\",\n      editorState: this.state.editorState,\n      onChange: this.updateEditorState.bind(this),\n      plugins: this.plugins,\n      handleKeyCommand: this.handleKeyCommand,\n      spellCheck: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default TextEditor;","map":{"version":3,"sources":["/Users/gkzhou/Dropbox/Code/leafletnotebook/src/components/TextEditor.jsx"],"names":["React","Form","Button","Segment","Icon","EditorState","ContentState","Editor","RichUtils","getDefaultKeyBinding","basicTextStylePlugin","keyBindingFn","event","handleKeyCommand","command","getEditorState","setEditorState","editorState","newEditorState","TextEditor","Component","constructor","props","downloadTxtFile","text","state","getCurrentContent","getPlainText","element","document","createElement","file","Blob","type","console","log","quotes","href","URL","createObjectURL","download","body","appendChild","click","value","createWithContent","createFromText","audioText","plugins","onChange","setState","bind","handleChange","updateEditorState","target","newState","_onBoldClick","toggleInlineStyle","_onItalicClick","render","focus"],"mappings":"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","sourcesContent":["// Import React!\nimport React from 'react'\nimport { Form, Button, Segment, Icon } from 'semantic-ui-react'\nimport { EditorState, ContentState, Editor, RichUtils, getDefaultKeyBinding } from 'draft-js'\n\nconst basicTextStylePlugin = {\n  keyBindingFn(event) {\n    return getDefaultKeyBinding(event);\n  },\n\n  handleKeyCommand(command, { getEditorState, setEditorState }) {\n    const editorState = getEditorState();\n    const newEditorState = RichUtils.handleKeyCommand(\n      editorState, command\n    );\n    if (newEditorState) {\n      setEditorState(newEditorState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n};\n\n\nclass TextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      editorState: EditorState.createWithContent(ContentState.createFromText(this.props.audioText)),\n    };\n    /* Create an array of plugins to be passed to `Editor` */\n    this.plugins = [\n      basicTextStylePlugin,\n    ];\n    this.onChange = (editorState) => this.setState({ editorState });\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  updateEditorState(editorState) {\n    this.setState({ editorState });\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n\n  _onBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n\n  _onItalicClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'ITALIC'));\n  }\n\n  downloadTxtFile = () => {\n    var text = this.state.editorState.getCurrentContent().getPlainText('\\n')\n    const element = document.createElement(\"a\");\n    const file = new Blob([text], { type: 'text/plain' });\n    console.log(this.props.quotes)\n    element.href = URL.createObjectURL(file);\n    element.download = \"transcript-edited.txt\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n\n  // Render the editor.\n  render() {\n    return (\n      <Segment className=\"editor-segment\">\n        <Button icon size='mini' onClick={this._onBoldClick.bind(this)}><Icon name='bold' /></Button>\n        <Button icon size='mini' onClick={this._onItalicClick.bind(this)}><Icon name='italic' /></Button>\n        test<Button floated='right' icon size='mini' onClick={this.downloadTxtFile}><Icon name='share square outline icon' /></Button>\n        <div className=\"editor\" onClick={this.focus}>\n          <Editor\n          id=\"textarea\"\n            editorState={this.state.editorState}\n            onChange={this.updateEditorState.bind(this)}\n            plugins={this.plugins}\n            handleKeyCommand={this.handleKeyCommand}\n            spellCheck={true}\n          ></Editor>\n        </div>\n      </Segment>\n    )\n  }\n}\n\nexport default TextEditor;"]},"metadata":{},"sourceType":"module"}