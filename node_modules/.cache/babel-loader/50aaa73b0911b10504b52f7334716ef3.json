{"ast":null,"code":"var _jsxFileName = \"/Users/chloebarreau/Downloads/leafletnotebook/src/components/TextEditor.jsx\";\n// Import React!\nimport React from 'react';\nimport { Form, TextArea } from 'semantic-ui-react';\nimport { EditorState, Editor, RichUtils } from 'draft-js'; // import { FontAwesomeIcon } from \"react-fontawesome\";\n// import {\n//   faBold,\n//   faUnderline,\n//   faItalic,\n//   faAnchor\n// } from \"free-solid-svg-icons\";\n// const inlineStyles = [\n//   {\n//     label: \"bold\",\n//     style: \"BOLD\",\n//     icon: <FontAwesomeIcon icon={faBold} />\n//   },\n//   {\n//     label: \"italic\",\n//     style: \"ITALIC\",\n//     icon: <FontAwesomeIcon icon={faItalic} />\n//   },\n//   {\n//     label: \"Underline\",\n//     style: \"UNDERLINE\",\n//     icon: <FontAwesomeIcon icon={faUnderline} />\n//   }\n// ];\n\nclass TextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      editorState: EditorState.createEmpty()\n    };\n\n    this.onChange = editorState => this.setState({\n      editorState\n    });\n\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  updateEditorState(editorState) {\n    this.setState({\n      editorState\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  _onBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n\n  _onItalicClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'ITALIC'));\n  } // Render the editor.\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"editor-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"toolbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this._onBoldClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Bold\"), React.createElement(\"button\", {\n      onClick: this._onItalicClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Italic\"), React.createElement(Editor, {\n      placeholder: \"some text\",\n      editorState: this.state.editorState,\n      onChange: this.updateEditorState.bind(this),\n      handleKeyCommand: this.handleKeyCommand,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TextEditor;","map":{"version":3,"sources":["/Users/chloebarreau/Downloads/leafletnotebook/src/components/TextEditor.jsx"],"names":["React","Form","TextArea","EditorState","Editor","RichUtils","TextEditor","Component","constructor","props","state","value","editorState","createEmpty","onChange","setState","handleKeyCommand","bind","handleChange","updateEditorState","event","target","command","newState","_onBoldClick","toggleInlineStyle","_onItalicClick","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,mBAA/B;AACA,SAASC,WAAT,EAAsBC,MAAtB,EAA8BC,SAA9B,QAA8C,UAA9C,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAN,SAAyBN,KAAK,CAACO,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,WAAW,EAAET,WAAW,CAACU,WAAZ;AAFF,KAAb;;AAIA,SAAKC,QAAL,GAAiBF,WAAD,IAAiB,KAAKG,QAAL,CAAc;AAACH,MAAAA;AAAD,KAAd,CAAjC;;AACA,SAAKI,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDE,EAAAA,iBAAiB,CAACP,WAAD,EAAa;AAC5B,SAAKG,QAAL,CAAc;AAACH,MAAAA;AAAD,KAAd;AACD;;AAEDM,EAAAA,YAAY,CAACE,KAAD,EAAQ;AAClB,SAAKL,QAAL,CAAc;AAACJ,MAAAA,KAAK,EAAES,KAAK,CAACC,MAAN,CAAaV;AAArB,KAAd;AACD;;AAEDK,EAAAA,gBAAgB,CAACM,OAAD,EAAUV,WAAV,EAAuB;AACrC,UAAMW,QAAQ,GAAGlB,SAAS,CAACW,gBAAV,CAA2BJ,WAA3B,EAAwCU,OAAxC,CAAjB;;AACA,QAAIC,QAAJ,EAAc;AACZ,WAAKT,QAAL,CAAcS,QAAd;AACA,aAAO,SAAP;AACD;;AACD,WAAO,aAAP;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,SAAKV,QAAL,CAAcT,SAAS,CAACoB,iBAAV,CAA4B,KAAKf,KAAL,CAAWE,WAAvC,EAAoD,MAApD,CAAd;AACD;;AAEDc,EAAAA,cAAc,GAAG;AACf,SAAKZ,QAAL,CAAcT,SAAS,CAACoB,iBAAV,CAA4B,KAAKf,KAAL,CAAWE,WAAvC,EAAoD,QAApD,CAAd;AACD,GAnCsC,CAqCvC;;;AACAe,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAQ,MAAA,OAAO,EAAE,KAAKH,YAAL,CAAkBP,IAAlB,CAAuB,IAAvB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAGE;AAAQ,MAAA,OAAO,EAAE,KAAKS,cAAL,CAAoBT,IAApB,CAAyB,IAAzB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,EAIE,oBAAC,MAAD;AACE,MAAA,WAAW,EAAC,WADd;AAEE,MAAA,WAAW,EAAE,KAAKP,KAAL,CAAWE,WAF1B;AAGE,MAAA,QAAQ,EAAE,KAAKO,iBAAL,CAAuBF,IAAvB,CAA4B,IAA5B,CAHZ;AAIE,MAAA,gBAAgB,EAAE,KAAKD,gBAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAgBD;;AAvDsC;;AA0DzC,eAAeV,UAAf","sourcesContent":["// Import React!\nimport React from 'react'\nimport { Form, TextArea } from 'semantic-ui-react'\nimport { EditorState, Editor, RichUtils} from 'draft-js'\n// import { FontAwesomeIcon } from \"react-fontawesome\";\n\n// import {\n//   faBold,\n//   faUnderline,\n//   faItalic,\n//   faAnchor\n// } from \"free-solid-svg-icons\";\n\n// const inlineStyles = [\n//   {\n//     label: \"bold\",\n//     style: \"BOLD\",\n//     icon: <FontAwesomeIcon icon={faBold} />\n//   },\n//   {\n//     label: \"italic\",\n//     style: \"ITALIC\",\n//     icon: <FontAwesomeIcon icon={faItalic} />\n//   },\n//   {\n//     label: \"Underline\",\n//     style: \"UNDERLINE\",\n//     icon: <FontAwesomeIcon icon={faUnderline} />\n//   }\n// ];\n\nclass TextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      editorState: EditorState.createEmpty(),\n    };\n    this.onChange = (editorState) => this.setState({editorState});\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  updateEditorState(editorState){\n    this.setState({editorState});\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n\n  _onBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n\n  _onItalicClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'ITALIC'));\n  }\n\n  // Render the editor.\n  render() {\n    return (\n      <div className=\"editor-container\">\n        <div className=\"toolbar\"></div>\n        <button onClick={this._onBoldClick.bind(this)}>Bold</button>\n        <button onClick={this._onItalicClick.bind(this)}>Italic</button>\n        <Editor \n          placeholder=\"some text\" \n          editorState={this.state.editorState}\n          onChange={this.updateEditorState.bind(this)}\n          handleKeyCommand={this.handleKeyCommand}\n        ></Editor>\n        {/* <Form>\n          <TextArea style={{ minHeight: 630 }} placeholder='Transcript' value={this.state.value} onChange={this.handleChange}/>\n        </Form> */}\n      </div>\n    )\n  }\n}\n\nexport default TextEditor;"]},"metadata":{},"sourceType":"module"}