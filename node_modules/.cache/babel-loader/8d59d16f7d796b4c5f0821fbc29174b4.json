{"ast":null,"code":"var _jsxFileName = \"/Users/gkzhou/Dropbox/Code/leafletnotebook/src/components/UploadAudio.jsx\";\n// Main code from https://medium.com/excited-developers/file-upload-with-react-flask-e115e6f2bf99\nimport React from 'react';\nimport { Button, Input, Icon, Menu, Segment } from 'semantic-ui-react';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fileInputRef = React.createRef();\n\n    this.downloadTxtFile = () => {\n      const element = document.createElement(\"a\");\n      const file = new Blob(this.state.audioText.map(item => item + \"\\n\"), {\n        type: 'text/plain'\n      });\n      console.log(this.state.quotes);\n      element.href = URL.createObjectURL(file);\n      element.download = \"transcript.txt\";\n      document.body.appendChild(element); // Required for this to work in FireFox\n\n      element.click();\n    };\n\n    this.state = {\n      audioURL: '',\n      audioText: [],\n      timestamps: [],\n      uploaded: \"false\"\n    };\n    this.handleUploadAudio = this.handleUploadAudio.bind(this);\n    this.playWord = this.playWord.bind(this);\n    this.editTranscript = this.editTranscript.bind(this);\n  }\n\n  editTranscript(e, index) {\n    let tmpArr = this.state.audioText;\n\n    if (index % 2 === 1) {\n      // second speaker\n      tmpArr[index] = \"2:: \" + e.target.textContent;\n      console.log(e.target.textContent);\n    } else {\n      tmpArr[index] = \"1:: \" + e.target.textContent;\n    }\n\n    this.setState({\n      audioText: tmpArr\n    });\n  }\n\n  handleUploadAudio(ev) {\n    ev.preventDefault();\n    const data = new FormData();\n    data.append('file', this.uploadInput.files[0]);\n    fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      body: data\n    }).then(response => {\n      response.json().then(body => {\n        console.log(body.text);\n        this.setState({\n          audioURL: \"http://localhost:5000/static/\" + body.filename,\n          audioText: body.text,\n          timestamps: body.timestamps,\n          uploaded: \"true\"\n        });\n        this.props.onDataFetched(body.filename);\n        {\n          /* send audio's filename to Tools component */\n        }\n        console.log(\"Video transcript: \" + this.state.audioText);\n        console.log(\"Timestamps: \" + this.state.timestamps);\n      });\n    });\n  }\n\n  playWord(event) {\n    const id = event.target.id;\n    console.log(this.state.timestamps[id]);\n  }\n\n  render() {\n    var indexNumber = -1;\n    return React.createElement(\"div\", {\n      className: \"transcript\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      className: \"no-border\",\n      style: {\n        overflow: 'auto',\n        maxHeight: '90vh'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.props.title), React.createElement(\"div\", {\n      className: \"right-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Button, {\n      icon: true,\n      size: \"mini\",\n      onClick: this.downloadTxtFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"share square outline icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })))), React.createElement(\"form\", {\n      onSubmit: this.handleUploadAudio,\n      encType: \"multipart/form-data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \" \", this.state.uploaded == \"false\" && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      for: \"hidden-new-audio-file\",\n      class: \"ui button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Upload Audio\"), React.createElement(\"input\", {\n      type: \"file\",\n      id: \"hidden-new-audio-file\",\n      ref: ref => {\n        this.uploadInput = ref;\n      },\n      onChange: this.handleUploadAudio,\n      style: {\n        display: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.audioText.map((item, index) => {\n      if (item.includes(\"2::\") && item.substring(4, item.length) != \"\") return React.createElement(\"li\", {\n        key: index,\n        className: \"speaker-red\",\n        contentEditable: \"true\",\n        onBlur: e => this.editTranscript(e, index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, item.trim().substring(4, item.length).split(\" \").map(word => React.createElement(\"span\", {\n        className: \"word\",\n        id: indexNumber++,\n        onClick: this.playWord,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, word + \" \")));else return React.createElement(\"li\", {\n        key: index,\n        className: \"speaker-yellow\",\n        contentEditable: \"true\",\n        onBlur: e => this.editTranscript(e, index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, item.trim().substring(4, item.length).split(\" \").map(word => React.createElement(\"span\", {\n        className: \"word\",\n        id: indexNumber++,\n        onClick: this.playWord,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, word + \" \")));\n    })))), React.createElement(\"audio\", {\n      id: \"audio-player\",\n      controls: true,\n      src: this.state.audioURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Your browser does not support the\", React.createElement(\"code\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"audio\"), \" element.\")));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/gkzhou/Dropbox/Code/leafletnotebook/src/components/UploadAudio.jsx"],"names":["React","Button","Input","Icon","Menu","Segment","Main","Component","constructor","props","fileInputRef","createRef","downloadTxtFile","element","document","createElement","file","Blob","state","audioText","map","item","type","console","log","quotes","href","URL","createObjectURL","download","body","appendChild","click","audioURL","timestamps","uploaded","handleUploadAudio","bind","playWord","editTranscript","e","index","tmpArr","target","textContent","setState","ev","preventDefault","data","FormData","append","uploadInput","files","fetch","method","then","response","json","text","filename","onDataFetched","event","id","render","indexNumber","overflow","maxHeight","display","flexDirection","justifyContent","title","ref","includes","substring","length","trim","split","word"],"mappings":"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","sourcesContent":["// Main code from https://medium.com/excited-developers/file-upload-with-react-flask-e115e6f2bf99\nimport React from 'react';\nimport { Button, Input, Icon, Menu, Segment } from 'semantic-ui-react'\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      audioURL: '',\n      audioText: [],\n      timestamps: [],\n      uploaded: \"false\",\n    };\n    this.handleUploadAudio = this.handleUploadAudio.bind(this);\n    this.playWord = this.playWord.bind(this);\n\n    this.editTranscript= this.editTranscript.bind(this);\n  }\n\n  fileInputRef = React.createRef();\n\n\n  editTranscript(e, index) {\n    let tmpArr = this.state.audioText;\n  \n    if (index % 2 === 1) { // second speaker\n      tmpArr[index] = \"2:: \" + e.target.textContent;\n      console.log(e.target.textContent)\n    }\n    else {\n      tmpArr[index] = \"1:: \" + e.target.textContent;\n    }\n    this.setState({ audioText: tmpArr})\n    \n  }\n\n\n\n\n  handleUploadAudio(ev) {\n    ev.preventDefault();\n\n    const data = new FormData();\n    data.append('file', this.uploadInput.files[0]);\n\n    fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      body: data,\n    }).then((response) => {\n      response.json().then((body) => {\n        console.log(body.text);\n        this.setState({\n          audioURL: \"http://localhost:5000/static/\" + body.filename,\n          audioText: body.text,\n          timestamps: body.timestamps,\n          uploaded: \"true\"\n        });\n        this.props.onDataFetched(body.filename); {/* send audio's filename to Tools component */ }\n\n        console.log(\"Video transcript: \" + this.state.audioText);\n        console.log(\"Timestamps: \" + this.state.timestamps);\n      });\n    });\n  }\n\n  downloadTxtFile = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob(this.state.audioText.map((item) => (item + \"\\n\")), { type: 'text/plain' });\n    console.log(this.state.quotes)\n    element.href = URL.createObjectURL(file);\n    element.download = \"transcript.txt\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n\n  playWord(event) {\n    const id = event.target.id;\n    console.log(this.state.timestamps[id]);\n  }\n\n  render() {\n    var indexNumber = -1;\n\n    return (\n      <div className=\"transcript\">\n        <Segment className=\"no-border\" style={{ overflow: 'auto', maxHeight: '90vh' }}>\n          <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\n            <h2>{this.props.title}</h2>\n            <div className=\"right-btn\">\n              <Button icon size='mini' onClick={this.downloadTxtFile}><Icon name='share square outline icon' /></Button>\n            </div>\n          </div>\n          <form onSubmit={this.handleUploadAudio} encType=\"multipart/form-data\"> {/* change Audio to Text to revert*/}\n            {this.state.uploaded == \"false\" && <div>\n\n              <label for=\"hidden-new-audio-file\" class=\"ui button\">\n                Upload Audio\n          </label>\n              <input type=\"file\" id=\"hidden-new-audio-file\"\n                ref={(ref) => { this.uploadInput = ref; }}\n                onChange={this.handleUploadAudio}\n                style={{ display: \"none\" }}>\n              </input>\n            </div>\n            }\n            <br />\n            <ul>\n            <div>\n              {this.state.audioText.map((item, index) => {\n                if ((item.includes(\"2::\")) && item.substring(4, item.length) != \"\")\n                  return (<li key={index} className=\"speaker-red\" contentEditable=\"true\" onBlur={(e) => this.editTranscript(e, index)}>\n                    {item.trim().substring(4, item.length).split(\" \").map((word) => <span className=\"word\" id={indexNumber++} onClick={this.playWord}>{word + \" \"}</span>)}\n                  </li>)\n                else\n                  return (<li key={index} className=\"speaker-yellow\" contentEditable=\"true\" onBlur={(e) => this.editTranscript(e, index)}>\n                    {item.trim().substring(4, item.length).split(\" \").map((word) => <span className=\"word\" id={indexNumber++} onClick={this.playWord}>{word + \" \"}</span>)}\n                  </li>)\n              })}\n              </div>\n            </ul>\n            {/*}\n        <ul>\n          {Object.keys(this.state.imageText).map(key =>\n            <li>{key} - {this.state.imageText[key]}</li>\n          )\n          }\n\n        </ul>\n        */}\n          </form>\n          <audio id=\"audio-player\" controls\n            src={this.state.audioURL}>\n            Your browser does not support the\n              <code>audio</code> element.\n              </audio>\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}