{"ast":null,"code":"var _jsxFileName = \"/Users/gkzhou/Dropbox/Code/leafletnotebook/src/components/UploadNotes.jsx\";\n// Main code from https://medium.com/excited-developers/file-upload-with-react-flask-e115e6f2bf99\nimport React from 'react';\nimport { Button, Input, Icon, Menu, Segment, Header } from 'semantic-ui-react';\n\nclass UploadImage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fileInputRef = React.createRef();\n    this.state = {\n      imageURL: '',\n      imageText: '',\n\n      /*test audio*/\n      uploaded: \"false\"\n    };\n    this.handleUpload = this.handleUpload.bind(this);\n    this.handleUploadImage = this.handleUploadImage.bind(this);\n  }\n\n  handleUpload() {\n    this.setState({\n      uploaded: \"true\"\n    });\n    console.log(\"onchenged\");\n  }\n\n  handleUploadImage(ev) {\n    ev.preventDefault();\n    const data = new FormData();\n    data.append('file', this.uploadInput.files[0]);\n    fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      body: data\n    }).then(response => {\n      response.json().then(body => {\n        console.log(body.text);\n        this.setState({\n          imageURL: \"http://localhost:5000/static/\" + body.filename,\n          imageText: body.text,\n          uploaded: \"true\"\n        });\n        console.log(this.state.imageText);\n        this.props.onDataFetched(this.state.imageText.title);\n        {\n          /* send image's text data to Tools component */\n        }\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleUploadImage,\n      encType: \"multipart/form-data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \" \", React.createElement(Header, {\n      as: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Notes\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      for: \"hidden-new-file\",\n      class: \"ui blue button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Upload Notes\"), React.createElement(\"input\", {\n      type: \"file\",\n      id: \"hidden-new-file\",\n      ref: ref => {\n        this.uploadInput = ref;\n      },\n      onChange: this.handleUploadImage,\n      style: {\n        display: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), this.state.uploaded == \"true\" && React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, Object.keys(this.state.imageText).map(key => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, key, \" - \", this.state.imageText[key]))))));\n  }\n\n}\n\nexport default UploadImage;","map":{"version":3,"sources":["/Users/gkzhou/Dropbox/Code/leafletnotebook/src/components/UploadNotes.jsx"],"names":["React","Button","Input","Icon","Menu","Segment","Header","UploadImage","Component","constructor","props","fileInputRef","createRef","state","imageURL","imageText","uploaded","handleUpload","bind","handleUploadImage","setState","console","log","ev","preventDefault","data","FormData","append","uploadInput","files","fetch","method","body","then","response","json","text","filename","onDataFetched","title","render","ref","display","Object","keys","map","key"],"mappings":"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","sourcesContent":["// Main code from https://medium.com/excited-developers/file-upload-with-react-flask-e115e6f2bf99\nimport React from 'react';\nimport { Button, Input, Icon, Menu, Segment, Header } from 'semantic-ui-react'\n\nclass UploadImage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      imageURL: '',\n      imageText: '',\n      /*test audio*/\n\n      uploaded: \"false\",\n    };\n\n\n    this.handleUpload = this.handleUpload.bind(this);\n    this.handleUploadImage = this.handleUploadImage.bind(this);\n  }\n\n  fileInputRef = React.createRef();\n\n\n  handleUpload() {\n    this.setState({\n      uploaded: \"true\"\n    });\n    console.log(\"onchenged\")\n  }\n\n\n  handleUploadImage(ev) {\n    ev.preventDefault();\n\n    const data = new FormData();\n    data.append('file', this.uploadInput.files[0]);\n\n    fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      body: data,\n    }).then((response) => {\n      response.json().then((body) => {\n        console.log(body.text);\n        this.setState({\n          imageURL: \"http://localhost:5000/static/\" + body.filename,\n          imageText: body.text,\n          uploaded: \"true\"\n        });\n        console.log(this.state.imageText);\n        this.props.onDataFetched(this.state.imageText.title); {/* send image's text data to Tools component */ }\n      });\n    });\n  }\n\n  render() {\n    return (\n      <Segment>\n      <form onSubmit={this.handleUploadImage} encType=\"multipart/form-data\"> {/* change Audio to Text to revert*/}\n        <Header as='h3'>Notes</Header>\n        <div>\n\n          <label for=\"hidden-new-file\" class=\"ui blue button\">\n            Upload Notes\n          </label>\n          <input type=\"file\" id=\"hidden-new-file\"\n            ref={(ref) => { this.uploadInput = ref; }}\n            onChange={this.handleUploadImage}\n            style={{ display: \"none\" }}>\n          </input>\n\n        </div>\n        <br />\n        {/*}\n        {this.state.uploaded == \"true\" &&\n          <div>\n            <ul>\n              <li>0:28 - \"my class needs some really good traitors these days\"</li>\n              <li>1:09 - \"create the best and fairest country\"</li>\n              <li>2:13 - \"want to live in a world that doesn't need philanthropy\"</li>\n              <li>2:41 - \"prefer that public schools function...\"</li>\n            </ul>\n          </div>\n        }\n      */}\n{this.state.uploaded == \"true\" &&\n        <Segment>\n          <ul>\n            {Object.keys(this.state.imageText).map(key =>\n              <li>{key} - {this.state.imageText[key]}</li>\n            )\n            }\n          </ul>\n        </Segment>\n  }\n\n        {/*}.map((items, index) => {\n          return (\n            <ul key={index}>\n              {Object.keys(items).map((key) => {\n                return (\n                  <li key={key + index}>{key}:{items[key]}</li>\n                )\n              })}\n            </ul>\n          )\n        })}*/}\n\n      </form>\n      </Segment>\n    );\n  }\n}\n\nexport default UploadImage;"]},"metadata":{},"sourceType":"module"}