{"ast":null,"code":"var React = require('react');\n\nvar RegExpPropType = require('./regExpPropType');\n\nvar escapeStringRegexp = require('escape-string-regexp');\n\nvar blacklist = require('blacklist');\n\nvar createReactClass = require('create-react-class');\n\nvar PropTypes = require('prop-types');\n\nfunction removeDiacritics(str, blacklist) {\n  if (!String.prototype.normalize) {\n    // Fall back to original string\n    return str;\n  }\n\n  if (!blacklist) {\n    // No blacklist, just remove all\n    return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n  } else {\n    var blacklistChars = blacklist.split(''); // Remove all diacritics that are not a part of a blacklisted character\n    // First char cannot be a diacritic\n\n    return str.normalize('NFD').replace(/.[\\u0300-\\u036f]+/g, function (m) {\n      return blacklistChars.indexOf(m.normalize()) > -1 ? m.normalize() : m[0];\n    });\n  }\n}\n\nvar Highlighter = createReactClass({\n  displayName: 'Highlighter',\n  count: 0,\n  propTypes: {\n    search: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, RegExpPropType]).isRequired,\n    caseSensitive: PropTypes.bool,\n    ignoreDiacritics: PropTypes.bool,\n    diacriticsBlacklist: PropTypes.string,\n    matchElement: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    matchClass: PropTypes.string,\n    matchStyle: PropTypes.object\n  },\n  render: function () {\n    var props = blacklist(this.props, 'search', 'caseSensitive', 'ignoreDiacritics', 'diacriticsBlacklist', 'matchElement', 'matchClass', 'matchStyle');\n    return React.createElement('span', props, this.renderElement(this.props.children));\n  },\n\n  /**\n   * A wrapper to the highlight method to determine when the highlighting\n   * process should occur.\n   *\n   * @param  {string} subject\n   *   The body of text that will be searched for highlighted words.\n   *\n   * @return {Array}\n   *   An array of ReactElements\n   */\n  renderElement: function (subject) {\n    if (this.isScalar() && this.hasSearch()) {\n      var search = this.getSearch();\n      return this.highlightChildren(subject, search);\n    }\n\n    return this.props.children;\n  },\n\n  /**\n   * Determine if props are valid types for processing.\n   *\n   * @return {Boolean}\n   */\n  isScalar: function () {\n    return /string|number|boolean/.test(typeof this.props.children);\n  },\n\n  /**\n   * Determine if required search prop is defined and valid.\n   *\n   * @return {Boolean}\n   */\n  hasSearch: function () {\n    return typeof this.props.search !== 'undefined' && this.props.search;\n  },\n\n  /**\n   * Get the search prop, but always in the form of a regular expression. Use\n   * this as a proxy to this.props.search for consistency.\n   *\n   * @return {RegExp}\n   */\n  getSearch: function () {\n    if (this.props.search instanceof RegExp) {\n      return this.props.search;\n    }\n\n    var flags = '';\n\n    if (!this.props.caseSensitive) {\n      flags += 'i';\n    }\n\n    var search = this.props.search;\n\n    if (typeof this.props.search === 'string') {\n      search = escapeStringRegexp(search);\n    }\n\n    if (this.props.ignoreDiacritics) {\n      search = removeDiacritics(search, this.props.diacriticsBlacklist);\n    }\n\n    return new RegExp(search, flags);\n  },\n\n  /**\n   * Get the indexes of the first and last characters of the matched string.\n   *\n   * @param  {string} subject\n   *   The string to search against.\n   *\n   * @param  {RegExp} search\n   *   The regex search query.\n   *\n   * @return {Object}\n   *   An object consisting of \"first\" and \"last\" properties representing the\n   *   indexes of the first and last characters of a matching string.\n   */\n  getMatchBoundaries: function (subject, search) {\n    var matches = search.exec(subject);\n\n    if (matches) {\n      return {\n        first: matches.index,\n        last: matches.index + matches[0].length\n      };\n    }\n  },\n\n  /**\n   * Determines which strings of text should be highlighted or not.\n   *\n   * @param  {string} subject\n   *   The body of text that will be searched for highlighted words.\n   * @param  {string} search\n   *   The search used to search for highlighted words.\n   *\n   * @return {Array}\n   *   An array of ReactElements\n   */\n  highlightChildren: function (subject, search) {\n    var children = [];\n    var remaining = subject;\n\n    while (remaining) {\n      var remainingCleaned = this.props.ignoreDiacritics ? removeDiacritics(remaining, this.props.diacriticsBlacklist) : remaining;\n\n      if (!search.test(remainingCleaned)) {\n        children.push(this.renderPlain(remaining));\n        return children;\n      }\n\n      var boundaries = this.getMatchBoundaries(remainingCleaned, search);\n\n      if (boundaries.first === 0 && boundaries.last === 0) {\n        // Regex zero-width match\n        return children;\n      } // Capture the string that leads up to a match...\n\n\n      var nonMatch = remaining.slice(0, boundaries.first);\n\n      if (nonMatch) {\n        children.push(this.renderPlain(nonMatch));\n      } // Now, capture the matching string...\n\n\n      var match = remaining.slice(boundaries.first, boundaries.last);\n\n      if (match) {\n        children.push(this.renderHighlight(match));\n      } // And if there's anything left over, recursively run this method again.\n\n\n      remaining = remaining.slice(boundaries.last);\n    }\n\n    return children;\n  },\n\n  /**\n   * Responsible for rending a non-highlighted element.\n   *\n   * @param  {string} string\n   *   A string value to wrap an element around.\n   *\n   * @return {ReactElement}\n   */\n  renderPlain: function (string) {\n    this.count++;\n    return React.createElement('span', {\n      key: this.count,\n      children: string\n    });\n  },\n\n  /**\n   * Responsible for rending a highlighted element.\n   *\n   * @param  {string} string\n   *   A string value to wrap an element around.\n   *\n   * @return {ReactElement}\n   */\n  renderHighlight: function (string) {\n    this.count++;\n    return React.createElement(this.props.matchElement, {\n      key: this.count,\n      className: this.props.matchClass,\n      style: this.props.matchStyle,\n      children: string\n    });\n  }\n});\nHighlighter.defaultProps = {\n  caseSensitive: false,\n  ignoreDiacritics: false,\n  diacriticsBlacklist: '',\n  matchElement: 'mark',\n  matchClass: 'highlight',\n  matchStyle: {}\n};\nmodule.exports = Highlighter;","map":null,"metadata":{},"sourceType":"script"}