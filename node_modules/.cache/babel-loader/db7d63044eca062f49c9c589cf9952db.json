{"ast":null,"code":"import React from 'react';\nvar isProduction = \"development\" === 'production';\nvar prefix = 'Invariant failed';\n\nvar index = function (condition, message) {\n  if (condition) {\n    return;\n  }\n\n  if (isProduction) {\n    throw new Error(prefix);\n  } else {\n    throw new Error(prefix + \": \" + (message || ''));\n  }\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n/*\n * Instance counter to enable unique marks for multiple Placeholder instances.\n */\n\n\nvar instanceCounter = 0;\n/**\n * A plugin that renders a React placeholder for a given Slate node.\n *\n * @param {Object} options\n * @return {Object}\n */\n\nfunction SlateReactPlaceholder() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var instanceId = instanceCounter++;\n  var placeholder = options.placeholder,\n      when = options.when,\n      _options$style = options.style,\n      style = _options$style === undefined ? {} : _options$style;\n  index(typeof placeholder === 'string', 'You must pass `SlateReactPlaceholder` an `options.placeholder` string.');\n  index(typeof when === 'string' || typeof when === 'function', 'You must pass `SlateReactPlaceholder` an `options.when` query.');\n  /**\n   * Decorate a match node with a placeholder mark when it fits the query.\n   *\n   * @param {Node} node\n   * @param {Editor} editor\n   * @param {Function} next\n   * @return {Array}\n   */\n\n  function decorateNode(node, editor, next) {\n    if (!editor.query(when, node)) {\n      return next();\n    }\n\n    var others = next();\n\n    var _node$texts = node.texts(),\n        _node$texts2 = slicedToArray(_node$texts, 1),\n        first = _node$texts2[0];\n\n    var _node$texts3 = node.texts({\n      direction: 'backward'\n    }),\n        _node$texts4 = slicedToArray(_node$texts3, 1),\n        last = _node$texts4[0];\n\n    var _first = slicedToArray(first, 2),\n        firstNode = _first[0],\n        firstPath = _first[1];\n\n    var _last = slicedToArray(last, 2),\n        lastNode = _last[0],\n        lastPath = _last[1];\n\n    var decoration = {\n      type: 'placeholder',\n      data: {\n        key: instanceId\n      },\n      anchor: {\n        key: firstNode.key,\n        offset: 0,\n        path: firstPath\n      },\n      focus: {\n        key: lastNode.key,\n        offset: lastNode.text.length,\n        path: lastPath\n      }\n    };\n    return [].concat(toConsumableArray(others), [decoration]);\n  }\n  /**\n   * Render an inline placeholder for the placeholder mark.\n   *\n   * @param {Object} props\n   * @param {Editor} editor\n   * @param {Function} next\n   * @return {Element}\n   */\n\n\n  function renderDecoration(props, editor, next) {\n    var children = props.children,\n        deco = props.decoration;\n\n    if (deco.type === 'placeholder' && deco.data.get('key') === instanceId) {\n      var placeHolderStyle = _extends({\n        pointerEvents: 'none',\n        display: 'inline-block',\n        width: '0',\n        maxWidth: '100%',\n        whiteSpace: 'nowrap',\n        opacity: '0.333',\n        verticalAlign: 'text-top'\n      }, style);\n\n      return React.createElement('span', null, React.createElement('span', {\n        contentEditable: false,\n        style: placeHolderStyle\n      }, placeholder), children);\n    }\n\n    return next();\n  }\n  /**\n   * Return the plugin.\n   *\n   * @return {Object}\n   */\n\n\n  return {\n    decorateNode: decorateNode,\n    renderDecoration: renderDecoration\n  };\n}\n\nexport default SlateReactPlaceholder;","map":null,"metadata":{},"sourceType":"module"}